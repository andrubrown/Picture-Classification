errors = rnorm(100, 0, 1)
for (i in 1:c){
errors = errors + rnorm(100,0,1)
}
random.dataset$response = response + errors
random.dataset$response[random.dataset$response<0]=0
random.dataset$response[random.dataset$response>0]=1
random.cart = rpart(response~., data = random.dataset)
random.cart.predict = predict(random.cart, random.dataset[,-6])
random.cart.predict[random.cart.predict<0]=0
random.cart.predict[random.cart.predict>0]=1
mean(random.dataset$response == random.cart.predict)
random.lm = lm(response~., data = random.dataset)
random.lm.predict= predict(random.lm, random.dataset[,-6])
random.lm.predict[random.lm.predict>0]=1
random.lm.predict[random.lm.predict<0]=0
mean(random.dataset$response==random.lm.predict)
c = 4
errors = rnorm(100, 0, 1)
for (i in 1:c){
errors = errors + rnorm(100,0,1)
}
random.randomForest = randomForest(response~., data=random.dataset, ntree = 25)
prostate.predict.rf = predict(random.randomForest, random.dataset[,-6])
prostate.predict.rf
prostate.predict.rf = predict(random.randomForest, random.dataset[,-6], type = "class")
prostate.predict.rf
c = 4
errors = rnorm(100, 0, 1)
for (i in 1:c){
errors = errors + rnorm(100,0,1)
}
random.dataset$response = response + errors
random.dataset$response[random.dataset$response<0]=0
random.dataset$response[random.dataset$response>0]=1
random.cart = rpart(response~., data = random.dataset)
random.cart.predict = predict(random.cart, random.dataset[,-6])
random.cart.predict[random.cart.predict<0]=0
random.cart.predict[random.cart.predict>0]=1
mean(random.dataset$response == random.cart.predict)
random.lm = lm(response~., data = random.dataset)
random.lm.predict= predict(random.lm, random.dataset[,-6])
random.lm.predict[random.lm.predict>0]=1
random.lm.predict[random.lm.predict<0]=0
mean(random.dataset$response==random.lm.predict)
random.randomForest = randomForest(response~., data=random.dataset, ntree = 25)
random.randomForest = predict(random.randomForest, random.dataset[,-6], type = "class")
random.randomForest[prostate.predict.rf<0.5]=0
random.randomForest[prostate.predict.rf>0.5]=1
mean(random.dataset$response==random.randomForest)
c = 9
errors = rnorm(100, 0, 1)
for (i in 1:c){
errors = errors + rnorm(100,0,1)
}
random.dataset$response = response + errors
random.dataset$response[random.dataset$response<0]=0
random.dataset$response[random.dataset$response>0]=1
random.cart = rpart(response~., data = random.dataset)
random.cart.predict = predict(random.cart, random.dataset[,-6])
random.cart.predict[random.cart.predict<0]=0
random.cart.predict[random.cart.predict>0]=1
mean(random.dataset$response == random.cart.predict)
random.lm = lm(response~., data = random.dataset)
random.lm.predict= predict(random.lm, random.dataset[,-6])
random.lm.predict[random.lm.predict>0]=1
random.lm.predict[random.lm.predict<0]=0
mean(random.dataset$response==random.lm.predict)
random.randomForest = randomForest(response~., data=random.dataset, ntree = 25)
random.randomForest = predict(random.randomForest, random.dataset[,-6], type = "class")
random.randomForest[prostate.predict.rf<0.5]=0
random.randomForest[prostate.predict.rf>0.5]=1
mean(random.dataset$response==random.randomForest)
c = 29
errors = rnorm(100, 0, 1)
for (i in 1:c){
errors = errors + rnorm(100,0,1)
}
random.dataset$response = response + errors
random.dataset$response[random.dataset$response<0]=0
random.dataset$response[random.dataset$response>0]=1
random.cart = rpart(response~., data = random.dataset)
random.cart.predict = predict(random.cart, random.dataset[,-6])
random.cart.predict[random.cart.predict<0]=0
random.cart.predict[random.cart.predict>0]=1
mean(random.dataset$response == random.cart.predict)
random.lm = lm(response~., data = random.dataset)
random.lm.predict= predict(random.lm, random.dataset[,-6])
random.lm.predict[random.lm.predict>0]=1
random.lm.predict[random.lm.predict<0]=0
mean(random.dataset$response==random.lm.predict)
random.randomForest = randomForest(response~., data=random.dataset, ntree = 25)
random.randomForest = predict(random.randomForest, random.dataset[,-6], type = "class")
random.randomForest[prostate.predict.rf<0.5]=0
random.randomForest[prostate.predict.rf>0.5]=1
mean(random.dataset$response==random.randomForest)
aa = c((-.10-0.035)^2,(.20-0.035)^2,(.05-0.035)^2,(-.05-0.035)^2,(.02-0.035)^2,(.09-0.035)^2)
bb = c((.21-.12)^2,(.07-.12)^2,(.30-.12)^2,(-.03-.12)^2,(-.08-.12)^2,(.25-.12)^2)
aa*bb
sum(aa*bb)/5
8.9132*10^-05/(0.103078*0.1565)
sum(aa*bb)/5/(0.103078*0.1565)
sum(aa*bb)/5/(0.103078*0.1565)*100
list.of.ppl.uncleaned = read.txt("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned
?even
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned %% 1]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned %% 1 !=0]
?odd
2 %% 1
list.of.ppl.uncleaned = list.of.ppl.uncleaned[dim(list.of.ppl.uncleaned)[1] %% 2 ==0]
1 %% 1
1 %% 1 == 1
2 %% 1 == 1
1 %% 2 == 1
1 %% 2
2 %% dim(list.of.ppl.uncleaned)[1] ==0
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
2 %% dim(list.of.ppl.uncleaned)[1] ==0
2 %% dim(list.of.ppl.uncleaned)[1] == 0
2 %% list.of.ppl.uncleaned == 0
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned == ""]
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != ""]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned[3]
list.of.ppl.uncleaned[4]
599/4
-4*1:149
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[-4*1:149]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned[2]
list.of.ppl.uncleaned[4]
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != list.of.ppl.uncleaned[4]]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Add Friend"]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != list.of.ppl.uncleaned[4]]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Add Friend"]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != ""]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Add Friend"]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Close FriendFriends"]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "FriendFriends"]
list.of.ppl.uncleaned
286/2
list.of.ppl.uncleaned = list.of.ppl.uncleaned[2*-1:143]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[-2*1:143]
list.of.ppl.uncleaned
list.of.ppl.uncleaned = readLines("Desktop/Pi day people.txt")
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != list.of.ppl.uncleaned[4]]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Add Friend"]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != ""]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Add Friend"]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "Close FriendFriends"]
list.of.ppl.uncleaned = list.of.ppl.uncleaned[list.of.ppl.uncleaned != "FriendFriends"]
list.of.ppl.uncleaned
heart = read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",", head=T, row.names=1) #462  10
heart$famhist = as.factor(heart$famhist)
library("e1071")
library("kernlab")
library("caret")
accuracy = c()
for (i in 1:5000){
samps = sample.int(462, 300)
heart.train = heart[sort(samps),]
heart.test = heart[-sort(samps),]
heart.svm = svm(chd~., data = heart.train, type = "C-classification")
heart.predict = predict(heart.svm, heart.test[,-10])
accuracy = c(accuracy, mean(heart.predict == heart.test[,10]))
}
mean(accuracy)
accuracy = c()
for (i in 1:5000){
samps = sample.int(462, 300)
heart.train = heart[sort(samps),]
heart.test = heart[-sort(samps),]
heart.svm = ksvm(chd~., data = heart.train, type = "C-svc")
heart.predict = predict(heart.svm, heart.test[,-10])
accuracy = c(accuracy, mean(heart.predict == heart.test[,10]))
}
mean(accuracy)
for (i in 1:5000){
samps = sample.int(462, 300)
heart.train = heart[sort(samps),]
heart.test = heart[-sort(samps),]
heart.svm = svm(chd~., data = heart.train, type = "C-classification")
heart.predict = predict(heart.svm, heart.test[,-10])
accuracy = c(accuracy, mean(heart.predict == heart.test[,10]))
}
mean(accuracy)
dim(heart)
hist(accuracy)
for (i in 1:5000){
samples = sample.int(462, 300)
heart.train = heart[samples,]
heart.test = heart[-samples,]
heart.svm = ksvm(chd~., data = heart.train, type = "C-svc")
heart.predict = predict(heart.svm, heart.test[,-10])
accuracy = c(accuracy, mean(heart.predict == heart.test[,10]))
}
mean(accuracy)
hist(accuracy)
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 300)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
1 - mean(test[img[-test.rows, 1]==8])
1 - mean(test[img[-test.rows, 1]==7])
1 - mean(test[img[-test.rows, 1]==6])
1 - mean(test[img[-test.rows, 1]==5])
1 - mean(test[img[-test.rows, 1]==4])
1 - mean(test[img[-test.rows, 1]==3])
1 - mean(test[img[-test.rows, 1]==2])
1 - mean(test[img[-test.rows, 1]==1])
train_img = read.csv("train.csv", header = F)
names(train_img) = c("V1", as.character(1:512))
train_img$V1 = as.factor(train_img$V1)
test_img = read.csv("test.csv", header = F)
names(test_img) = as.character(1:512)
img.svm = svm(V1~., data = train_img, type = "C-classification")
predicted.img.class = predict(img.svm, test_img)
write.csv(data.frame(id = c(1:length(predicted.img.class)),Predictions =  predicted.img.class), file = "predictions.cs")
write.csv(data.frame(id = c(1:length(predicted.img.class)),Predictions =  predicted.img.class), file = "predictions.csv")
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 100)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.109375
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0.08928571
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5671642
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.09090909
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1578947
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.2058824
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0.1323529
1 - mean(test[img[-test.rows, 1]==1])
#[1] 0.1846154
length(test)
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.109375
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0.08928571
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5671642
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.09090909
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1578947
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.2058824
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0.1323529
1 - mean(test[img[-test.rows, 1]==1])
#[1] 0.1846154
train_img = read.csv("train.csv", header = F)
names(train_img) = c("V1", as.character(1:512))
train_img$V1 = as.factor(train_img$V1)
test_img = read.csv("test.csv", header = F)
names(test_img) = as.character(1:512)
img.svm = svm(V1~., data = train_img, type = "C-classification")
predicted.img.class = predict(img.svm, test_img)
write.csv(data.frame(Predictions =  predicted.img.class), file = "predictions.csv")
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/Picture Classification")
###testing from known sample
img = read.csv("train.csv", header = F)
names(img) = c("V1", as.character(1:512))
img$V1 = as.factor(img$V1)
test.rows = sample(1:dim(img)[1], 700)
test.rows = test.rows[order(test.rows)]
training.sample = img[test.rows, ]
testing.sample = img[-test.rows, -1]
library("e1071")
img.svm = svm(V1~., data = training.sample, type = "C-classification")
predicted.img.class = predict(img.svm, testing.sample)
test = predicted.img.class == img[-test.rows, 1]
names(test) = img[-test.rows, 1]
test
mean(test)
#[1] 0.86
1 - mean(test[img[-test.rows, 1]==8])
#[1] 0.1111111
1 - mean(test[img[-test.rows, 1]==7])
#[1] 0
1 - mean(test[img[-test.rows, 1]==6])
#[1] 0.5714286
1 - mean(test[img[-test.rows, 1]==5])
#[1] 0.2
1 - mean(test[img[-test.rows, 1]==4])
#[1] 0.1666667
1 - mean(test[img[-test.rows, 1]==3])
#[1] 0.1428571
1 - mean(test[img[-test.rows, 1]==2])
#[1] 0
1 - mean(test[img[-test.rows, 1]==1])
img[-test.rows, 1]
test
names(test)
names(test) = c()
test
mean(test)
